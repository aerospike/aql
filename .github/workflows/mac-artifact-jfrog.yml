name: Mac Artifact - JFrog

on:
  repository_dispatch:
    types: [mac-build]
  push:
    branches: [actionsHub, main, "*-bugfix", "SERVER-216" ]
  pull_request:
    branches: [main]
  workflow_call:
    inputs:
      submodule:
        description: The directory of the submodule, if this workflow is being called on a submodule
        required: false
        type: string

jobs:
  build:
    strategy:
      matrix:
        os: [macos-13, macos-14, macos-15]
        include:
          - os: macos-13
            openssl-path: /usr/local/opt/openssl
            target-dir: target/Darwin-x86_64/bin
          - os: macos-14
            openssl-path: /opt/homebrew/opt/openssl
            target-dir: target/Darwin-arm64/bin
          - os: macos-15
            openssl-path: /opt/homebrew/opt/openssl
            target-dir: target/Darwin-arm64/bin
    runs-on: ${{ matrix.os }}
    steps:
      - name: Get checkout directory
        uses: haya14busa/action-cond@v1
        id: checkout-dir
        with:
          cond: ${{ inputs.submodule != '' }}
          if_true: aerospike-tools  # In this case we are expecting to checkout the tools package.
          if_false: aql
      - name: Get aql working directory
        uses: haya14busa/action-cond@v1
        id: working-dir
        with:
          cond: ${{ inputs.submodule != '' }}
          if_true: aerospike-tools/${{ inputs.submodule }}  # In this case we are expecting to checkout the tools package.
          if_false: aql
      - uses: actions/checkout@v3
        with:
          path: ${{ steps.checkout-dir.outputs.value }}
          fetch-depth: 0
      - name: Checkout ${{ steps.working-dir.outputs.value }}
        working-directory: ${{ steps.checkout-dir.outputs.value }}
        run: |
          git config --global url."https://github.com/".insteadOf "git@github.com:"
          git submodule update --init --recursive -- ${{ inputs.submodule || '.' }}
      - name: Print and get version
        working-directory: ${{ steps.working-dir.outputs.value }}
        id: tag
        run: |
          git describe --tags --always
          echo "tag=$(git describe --tags --always)" >> $GITHUB_OUTPUT
      - uses: kenchan0130/actions-system-info@v1.3.0
        id: system-info
      - name: Cache Aql
        uses: actions/cache@v3
        id: cache-aql
        env:
          cache-name: cache-aql
          cache-index: "9" # To clear the cache if needed.
        with:
          path: |
            ${{ steps.working-dir.outputs.value }}/target
          key: ${{ matrix.os }}-${{ runner.arch }}-${{ steps.system-info.outputs.release }}-build-${{ env.cache-name }}-${{ env.cache-index }}-${{ steps.tag.outputs.tag }}
      - name: Download C Client Deps
        run: |
          brew install automake libtool
      - name: Cache C Client
        uses: actions/cache@v3
        if: steps.cache-aql.outputs.cache-hit != 'true'
        env:
          cache-name: cache-c-client
        with:
          path: |
            ${{ steps.working-dir.outputs.value }}/modules/c-client/target
          key: ${{ matrix.os }}-${{ runner.arch }}-build-${{ env.cache-name }}-${{ hashFiles(format('{0}/modules/c-client/**/*', steps.working-dir.outputs.value)) }}
      - name: Cache Jansson
        uses: actions/cache@v3
        if: steps.cache-aql.outputs.cache-hit != 'true'
        env:
          cache-name: cache-jansson
        with:
          path: |
            ${{ steps.working-dir.outputs.value }}/modules/jansson/src
          key: ${{ matrix.os }}-${{ runner.arch }}-build-${{ env.cache-name }}-${{ hashFiles(format('{0}/modules/jansson/**/*', steps.working-dir.outputs.value)) }}
      - name: Build aql
        if: steps.cache-aql.outputs.cache-hit != 'true'
        working-directory: ${{ steps.working-dir.outputs.value }}
        run: |
          make OPENSSL_STATIC_PATH=${{ matrix.openssl-path }}/lib
      - name: Sanity Test tools
        working-directory: ${{ steps.working-dir.outputs.value }}
        run: |
          ls target
          cd ${{ matrix.target-dir }}
          ./aql -e "info" 2>&1 | grep "Failed to connect"
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-aql
          path: ${{ steps.working-dir.outputs.value }}/${{ matrix.target-dir }}/aql
          if-no-files-found: error
  upload-artifacts:
    strategy:
      matrix:
        os: [macos-13, macos-14, macos-15]
        include:
          - os: macos-13
            arch: x86_64
          - os: macos-14
            arch: arm64
          - os: macos-15
            arch: arm64
    needs: build
    uses: aerospike/shared-workflows/.github/workflows/reusable_deploy-artifacts.yaml@v2.0.0
    with:
      project: database
      build-name: aql
      version: ${{ github.ref_name }}
      artifactory-url: https://aerospike.jfrog.io
      artifactory-oidc-provider-name: database-gh-aerospike
      artifactory-oidc-audience: database-gh-aerospike
      artifact-name: ${{ matrix.os }}-aql
      retention-days: 1
      dry-run: false


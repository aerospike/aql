name: Mac Artifact Simplified

permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write
  issues: write
  discussions: write
  packages: write
  deployments: write
  id-token: write

on:
  push:
    branches: [actionsHub, main, "*-bugfix"]
  pull_request:
    branches: [main]

jobs:
  extract-version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Extract Version
        id: extract
        uses: aerospike/shared-workflows/.github/actions/extract-version-from-tag@main
        with:
          version-file: .github/workflows/VERSION.example
    outputs:
      version: ${{ steps.extract.outputs.version }}
      git_tag: ${{ steps.extract.outputs.git_tag }}
  # reusable_execute-build.yaml is a reusable workflow that enables building the project. This step
  # could be done another way, but the advantage of using the reusable workflow is that it allows
  # a single workflow that can be instrumented in the future.
  # This is also an example of using a matrix strategy to build in GHA
  build-aql:
    uses: aerospike/shared-workflows/.github/workflows/reusable_execute-build.yaml@v2.0.1
    needs: extract-version
    # Matrix strategy: Multi-platform builds across Ubuntu/Debian/RPM families (x86_64 native, ARM64 emulated)
    strategy:
      matrix:
        os: [macos-14, macos-15]
        include:
          - os: macos-14
            openssl-path: /opt/homebrew/opt/openssl        # Apple Silicon prefix
            target-dir: target/Darwin-arm64/bin
          - os: macos-15
            openssl-path: /opt/homebrew/opt/openssl
            target-dir: target/Darwin-arm64/bin
    with:
      runs-on: ${{ matrix.os }}
      jf-project: database
      jf-build-name: aql
      jf-build-id: ${{ github.run_number }}-buildinfo-${{ matrix.os }}
      gh-source-path: project-location
      gh-workflows-ref: v2.0.1 # use v2.0.1 once it is released
      working-directory: ./project-location
      build-script: |
        export HOMEBREW_NO_AUTO_UPDATE=1
        export HOMEBREW_NO_INSTALL_CLEANUP=1
        export HOMEBREW_CASK_OPTS="--no-quarantine"
        brew install automake libtool pkg-config openssl@3 || true
        make OPENSSL_STATIC_PATH="${{ matrix.openssl-path }}/lib"
      gh-artifact-directory: ${{ matrix.target-dir }}
      gh-artifact-name: ${{ matrix.os }}
      oidc-provider-name: database-gh-aerospike
      oidc-audience: database-gh-aerospike
      publish-build-info: true
      dry-run: false # default
  coalesce-artifacts:
    needs: [build-aql, extract-version]
    runs-on: ubuntu-latest
    steps:
      - name: Download All Matrix Artifacts
        uses: actions/download-artifact@v4
        with:
          path: build-artifacts/
      - name: List Artifacts
        run: |
          ls -laht build-artifacts
          find build-artifacts/ -type f -exec mkdir ${{needs.extract-version.outputs.version}} && cp {} ${{needs.extract-version.outputs.version}} \;
      - name: Upload build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: build-artifacts
          overwrite: true
          retention-days: 1
  deploy-artifacts:
    uses: aerospike/shared-workflows/.github/workflows/reusable_deploy-artifacts.yaml@v2.0.1
    needs: [coalesce-artifacts, extract-version]
    with:
      jf-project: database
      jf-build-name: aql
      jf-build-id: ${{ github.run_number }}
      jf-metadata-build-id: ${{ github.run_number }}-metadata
      gh-artifact-name: build-artifacts
      gh-workflows-ref: v2.0.1
      version: ${{ needs.extract-version.outputs.version }}
      oidc-provider-name: database-gh-aerospike
      oidc-audience: database-gh-aerospike
      gh-retention-days: 1
      dry-run: false
